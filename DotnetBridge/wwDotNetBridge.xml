<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wwDotNetBridge</name>
    </assembly>
    <members>
        <member name="T:Westwind.WebConnection.wwDotNetBridge">
            <summary>
            The wwDotNetBridge class provides a host of COM support functions for Visual FoxPro.
            It allows you to host the .NET runtime without relying on COM interop to load types,
            rather it acts as a proxy for instantiation and other tasks. 
            
            This library can be used itself to load .NET and types, or you can use it as a helper
            with COM interop in which case you have to instantiate it as a COM object and call
            its methods directly rather than using the FoxPro helper class.
            </summary>
        </member>
        <member name="P:Westwind.WebConnection.wwDotNetBridge.ErrorMessage">
            <summary>
            Returns error information if the call fails
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.LoadAssembly(System.String)">
            <summary>
            Loads an assembly into the AppDomain by its fully qualified assembly name
            </summary>
            <param name="AssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.LoadAssemblyFrom(System.String)">
            <summary>
            Loads an assembly into the AppDomain by a fully qualified assembly path
            </summary>
            <param name="AssemblyFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateInstance(System.String)">
            <summary>
            Creates a type reference from a given type name if the
            assembly is already loaded.
            </summary>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateInstance_OneParm(System.String,System.Object)">
            <summary>
            Creates a type reference from a given type name if the
            assembly is already loaded.
            </summary>        
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateInstance_TwoParms(System.String,System.Object,System.Object)">
            <summary>
            Creates a type reference from a given type name if the
            assembly is already loaded.
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateInstance_ThreeParms(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Creates a type reference from a given type name if the
            assembly is already loaded.
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateInstance_Internal(System.String,System.Object[])">
            <summary>
            Creates an instance of a class  based on its type name. Assumes that the type's
            assembly is already loaded.
            
            Note this will be a little slower than the versions that work with assembly
            name specified because this code has to search for the type first rather
            than directly activating it.
            </summary>
            <param name="TypeName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateInstance_Internal(System.String,System.String,System.Object[])">
            <summary>
            Routine that loads an assembly by its 'application assembly name' - unsigned
            assemblies must be visible via the .NET path (current path or BIN dir) and
            GAC assemblies must be referenced by their full assembly name.
            </summary>
            <param name="AssemblyName"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateInstanceOnType(System.Object,System.String,System.String)">
            <summary>
            Creates an instance of a .NET type and stores it on an existing property of another type.
            
            Use this method if you can't access a type through COM ([ComVisible(false)]
            </summary>
            <param name="instance"></param>
            <param name="property"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateAssemblyInstanceFromFile(System.String,System.String)">
            <summary>
            Creates an instance from a file reference with a parameterless constructor
            </summary>
            <param name="AssemblyFileName"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateAssemblyInstanceFromFile_OneParm(System.String,System.String,System.Object)">
            <summary>
            Creates an instance from a file reference with a 1 parameter constructor
            </summary>
            <param name="AssemblyFileName"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateAssemblyInstanceFromFile_TwoParms(System.String,System.String,System.Object,System.Object)">
            <summary>
            Creates an instance from a file reference with a two parameter constructor
            </summary>
            <param name="AssemblyFileName"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateInstanceFromFile_Internal(System.String,System.String,System.Object[])">
            <summary>
            Routine that loads a class from an assembly file name specified.
            </summary>
            <param name="AssemblyFileName"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateAssemblyInstance(System.String,System.String)">
            <summary>
            Creates a new instance from a file file based assembly refence. Requires full
            filename including extension and path.
            </summary>
            <param name="AssemblyFileName"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateAssemblyInstance_OneParm(System.String,System.String,System.Object)">
            <summary>
            Creates a new instance from a file file based assembly refence. Requires full
            filename including extension and path.
            </summary>
            <param name="AssemblyFileName"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateAssemblyInstance_TwoParms(System.String,System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance from a file file based assembly refence. Requires full
            filename including extension and path.
            </summary>
            <param name="AssemblyFileName"></param>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.InvokeStaticMethod_Internal(System.String,System.String,System.Object[])">
            <summary>
            Invokes a static method
            </summary>
            <param name="TypeName"></param>
            <param name="Method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.GetStaticProperty(System.String,System.String)">
            <summary>
            Retrieves a value from  a static property by specifying a type full name and property
            </summary>
            <param name="TypeName">Full type name (namespace.class)</param>
            <param name="Property">Property to get value from</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.GetEnumString(System.String,System.Object)">
            <summary>
            Returns the name of an enum field given an enum value
            passed. Pass in the name of the enum type
            </summary>
            <param name="EnumTypeName"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.GetTypeFromName(System.String)">
            <summary>
            Helper routine that looks up a type name and tries to retrieve the
            full type reference in the actively executing assemblies.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.InvokeMethod(System.Object,System.String)">
            <summary>
            Invokes a method with no parameters
            </summary>
            <param name="Instance"></param>
            <param name="Method"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.InvokeMethodWithParameterArray(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method with an explicit array of parameters
            Allows for any number of parameters to be passed.
            </summary>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.InvokeMethod_OneParm(System.Object,System.String,System.Object)">
            <summary>
            Invokes a method with one parameter
            </summary> 
            <param name="Instance"></param>
            <param name="Method"></param>
            <param name="Parm1"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.InvokeMethod_TwoParms(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Invokes a method with two parameters
            </summary>
            <param name="Instance"></param>
            <param name="Method"></param>
            <param name="Parm1"></param>
            <param name="Parm2"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.InvokeMethodAsync(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method on a new thread and fires OnCompleted and OnError
            events on a passed in callback object.
            </summary>
            <param name="callBack">
            A callback object that has to have two methods:
            OnCompleted(lvResult, lcMethod)
            OnError(lcErrorMsg,loException, lcMethod)        
            </param>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.InvokeStaticMethodAsync(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Invokes a method on a new thread and fires OnCompleted and OnError
            events on a passed in callback object.
            </summary>
            <param name="callBack">
            A callback object that has to have two methods:
            OnCompleted(lvResult, lcMethod)
            OnError(lcErrorMsg,loException, lcMethod)        
            </param>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge._InvokeMethodAsync(System.Object)">
            <summary>
            Internal handler method that actually makes the async call on a thread
            </summary>
            <param name="parmList"></param>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.GetPropertyEx(System.Object,System.String)">
            <summary>
            Returns a property value by allowing . syntax to drill
            into nested objects. Use this method to step over objects 
            that FoxPro can't directly access (like structs, generics etc.)
            </summary>
            <param name="Instance"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets a property of a .NET object with a value
            </summary>
            <param name="Instance"></param>
            <param name="Property"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.SetPropertyEx(System.Object,System.String,System.Object)">
            <summary>
            Sets a property of a .NET object with a value using extended syntax.
            
            This method supports '.' syntax so you can use "Property.ChildProperty"
            to walk the object hierarchy in the string property parameter. 
            
            This method also supports accessing of Array/Collection indexers (Item[1])
            </summary>
            <param name="Instance"></param>
            <param name="Property"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateArrayInstanceInternal(System.Object,System.String,System.Int32)">
            <summary>
            Creates an instance of an array on a given base object instance by name.
            Array is created with 'empty' elements - ie. objects are null and value
            types are set to their default() values.
            </summary>
            <param name="baseType"></param>
            <param name="arrayProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateArrayOnInstance(System.Object,System.String,System.Int32)">
            <summary>
            Creates an array instance of a given type and size. Note the
            elements of this array are null/default and need to be set explicitly
            </summary>
            <param name="baseType">Object instance on which to create the array</param>
            <param name="arrayProperty">String property/field name of the array to create</param>
            <param name="size">Size of the array to createArray</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateArrayOnInstanceWithObject(System.Object,System.String,System.Object)">
            <summary>
            Creates a new array instance on a type of exactly 1 array item which is
            assigned the item parameter passed in. 
            </summary>
            <param name="baseType"></param>
            <param name="arrayProperty"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateArray(System.String)">
            <summary>
            Creates an instance of an array
            </summary>
            <param name="arrayTypeString"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.CreateArrayFromInstance(System.Object)">
            <summary>
            Creates an array from a specific instance of a COM object
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.AddArrayItem(System.Object,System.String,System.Object)">
            <summary>
            Used to add an item to an array by indirection to work around VFP's
            inability to easily add array elements.
            </summary>
            <param name="baseObject">The object that has the Array property</param>
            <param name="arrayObject">The array property name as a string</param>
            <param name="item">The item to set it to. Should not be null.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.GetIndexedProperty(System.Object,System.Int32)">
            <summary>
            Returns an indexed property Value
            </summary>
            <param name="baseList"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.GetArrayItem(System.Object,System.String,System.Int32)">
            <summary>
            Returns an individual Array Item by its index
            </summary>
            <param name="baseObject"></param>
            <param name="arrayName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.SetArrayItem(System.Object,System.String,System.Int32,System.Object)">
            <summary>
            Sets an array element to a given value. Assumes the array is big
            enough and the array item exists.
            </summary>
            <param name="baseObject">base object reference</param>
            <param name="arrayName">Name of the array as a string</param>
            <param name="index">The index of the item to set</param>
            <param name="value">The value to set the array item to</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.RemoveArrayItem(System.Object,System.String,System.Int32)">
            <summary>
            Removes an item from a .NET array with indirection to work around VFP's
            inability to manipulate .NET array elements.
            </summary>
            <param name="baseObject">The arrays parent object</param>
            <param name="arrayObject">The array's name as a string</param>
            <param name="Index">The index to of the item to delete. NOTE: 1 based!</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.DataSetToXmlString(System.Data.DataSet,System.Boolean)">
            <summary>
            Returns an XML string from a .NET DataSet
            </summary>
            <param name="ds"></param>
            <param name="includeSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.XmlStringToDataSet(System.String)">
            <summary>
            Converts an Xml String created from a FoxPro Xml Adapter or CursorToXml
            into a DataSet if possible.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.FixupReturnValue(System.Object)">
            <summary>
            Fixes up a return value to return to FoxPro 
            based on its type. Fixes up some values to
            be type safe for FoxPro and others are returned
            as wrappers (ComArray, ComGuid)
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.ConvertObjectToByteArray(System.Object)">
            <summary>
            Converts an object to a byte array
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.wwDotNetBridge.FixupAssemblyName(System.String)">
            <summary>
            Helper routine that automatically assigns default names to certain
            'common' system assemblies so that we don't have to provide a full path
            
            NOTE: 
            All names are for .NET 2.0 Runtime at the moment
            </summary>
            <param name="AssemblyName"></param>
        </member>
        <member name="M:Westwind.WebConnection.TypePassingTests.PassEnumArray(System.Windows.Forms.MessageBoxButtons[])">
            <summary>
            </summary>
            <example>
            LOCAL loArray as Westwind.WebConnection.ComArray
            loArray = loBridge.Createarray("System.Windows.Forms.MessageBoxButtons")
            loComValue = loBridge.CreateComValue()
            loComValue.SetEnum("System.Windows.Forms.MessageBoxButtons.OK")
            loArray.AddItem( loComValue) 
            ? loBridge.InvokeMethod(loTest,"PassEnumArray",loArray)
            </example>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.TypePassingTests.Pass24Parameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Pass in 15 parameters and return the value of the last
            </summary>
            <returns></returns>
        </member>
        <member name="T:Westwind.WebConnection.FileUtils">
            <summary>
            wwUtils class which contains a set of common utility classes for 
            Formatting strings
            Reflection Helpers
            Object Serialization
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.FileUtils.CopyStream(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies the content of the one stream to another.
            Streams must be open and stay open.
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.FileUtils.GetFileEncoding(System.String)">
            <summary>
            Detects the byte order mark of a file and returns
            an appropriate encoding for the file.
            </summary>
            <param name="srcFile"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.FileUtils.OpenStreamReaderWithEncoding(System.String)">
            <summary>
            Opens a stream reader with the appropriate text encoding applied.
            </summary>
            <param name="srcFile"></param>
        </member>
        <member name="M:Westwind.WebConnection.FileUtils.JustPath(System.String)">
            <summary>
            Returns the full path of a full physical filename
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.FileUtils.GetFullPath(System.String)">
            <summary>
            Returns a fully qualified path from a partial or relative
            path.
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:Westwind.WebConnection.FileUtils.GetRelativePath(System.String,System.String)">
            <summary>
            Returns a relative path string from a full path.
            </summary>
            <param name="FullPath">The path to convert. Can be either a file or a directory</param>
            <param name="BasePath">The base path to truncate to and replace</param>
            <returns>
            Lower case string of the relative path. If path is a directory it's returned without a backslash at the end.
            
            Examples of returned values:
             .\test.txt, ..\test.txt, ..\..\..\test.txt, ., ..
            </returns>
        </member>
        <member name="M:Westwind.WebConnection.FileUtils.DeleteFiles(System.String,System.Int32)">
            <summary>
            Deletes files based on a file spec and a given timeout.
            This routine is useful for cleaning up temp files in 
            Web applications.
            </summary>
            <param name="filespec">A DOS filespec that includes path and/or wildcards to select files</param>
            <param name="seconds">The timeout - if files are older than this timeout they are deleted</param>
        </member>
        <member name="T:Westwind.WebConnection.ReflectionUtils">
            <summary>
            Collection of Reflection and type conversion related utility functions
            </summary>
        </member>
        <member name="F:Westwind.WebConnection.ReflectionUtils.MemberAccess">
            <summary>
            Binding Flags constant to be reused for all Reflection access methods.
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetProperty(System.Object,System.String)">
            <summary>
            Retrieve a property value from an object dynamically. This is a simple version
            that uses Reflection calls directly. It doesn't support indexers.
            </summary>
            <param name="instance">Object to make the call on</param>
            <param name="property">Property to retrieve</param>
            <returns>Object - cast to proper type</returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetField(System.Object,System.String)">
            <summary>
            Retrieve a field dynamically from an object. This is a simple implementation that's
            straight Reflection and doesn't support indexers.
            </summary>
            <param name="Object">Object to retreve Field from</param>
            <param name="Property">name of the field to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetPropertyInternal(System.Object,System.String)">
            <summary>
            Parses Properties and Fields including Array and Collection references.
            Used internally for the 'Ex' Reflection methods.
            </summary>
            <param name="Parent"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.SetPropertyInternal(System.Object,System.String,System.Object)">
            <summary>
            Parses Properties and Fields including Array and Collection references.
            </summary>
            <param name="Parent"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetPropertyEx(System.Object,System.String)">
            <summary>
            Returns a property or field value using a base object and sub members including . syntax.
            For example, you can access: oCustomer.oData.Company with (this,"oCustomer.oData.Company")
            This method also supports indexers in the Property value such as:
            Customer.DataSet.Tables["Customers"].Rows[0]
            </summary>
            <param name="Parent">Parent object to 'start' parsing from. Typically this will be the Page.</param>
            <param name="Property">The property to retrieve. Example: 'Customer.Entity.Company'</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetPropertyInfoEx(System.Object,System.String)">
            <summary>
            Returns a PropertyInfo object for a given dynamically accessed property
            
            Property selection can be specified using . syntax ("Address.Street" or "DataTable[0].Rows[1]") hence the 'Ex' name for this function.
            </summary>
            <param name="Parent"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetPropertyInfoInternal(System.Object,System.String)">
            <summary>
            Returns a PropertyInfo structure from an extended Property reference
            </summary>
            <param name="Parent"></param>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the property on an object. This is a simple method that uses straight Reflection 
            and doesn't support indexers.
            </summary>
            <param name="obj">Object to set property on</param>
            <param name="property">Name of the property to set</param>
            <param name="value">value to set it to</param>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.SetField(System.Object,System.String,System.Object)">
            <summary>
            Sets the field on an object. This is a simple method that uses straight Reflection 
            and doesn't support indexers.
            </summary>
            <param name="obj">Object to set property on</param>
            <param name="property">Name of the field to set</param>
            <param name="value">value to set it to</param>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.SetPropertyEx(System.Object,System.String,System.Object)">
            <summary>
            Sets a value on an object. Supports . syntax for named properties
            (ie. Customer.Entity.Company) as well as indexers.
            </summary>
            <param name="Object ParentParent">
            Object to set the property on.
            </param>
            <param name="String PropertyProperty">
            Property to set. Can be an object hierarchy with . syntax and can 
            include indexers. Examples: Customer.Entity.Company, 
            Customer.DataSet.Tables["Customers"].Rows[0]
            </param>
            <param name="Object ValueValue">
            Value to set the property to
            </param>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CallMethod(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Calls a method on an object dynamically. This version requires explicit
            specification of the parameter type signatures.
            </summary>
            <param name="instance">Instance of object to call method on</param>
            <param name="method">The method to call as a stringToTypedValue</param>
            <param name="parameterTypes">Specify each of the types for each parameter passed. 
            You can also pass null, but you may get errors for ambiguous methods signatures
            when null parameters are passed</param>
            <param name="parms">any variable number of parameters.</param>        
            <returns>object</returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object dynamically. 
            
            This version doesn't require specific parameter signatures to be passed. 
            Instead parameter types are inferred based on types passed. Note that if 
            you pass a null parameter, type inferrance cannot occur and if overloads
            exist the call may fail. if so use the more detailed overload of this method.
            </summary> 
            <param name="instance">Instance of object to call method on</param>
            <param name="method">The method to call as a stringToTypedValue</param>
            <param name="parameterTypes">Specify each of the types for each parameter passed. 
            You can also pass null, but you may get errors for ambiguous methods signatures
            when null parameters are passed</param>
            <param name="parms">any variable number of parameters.</param>        
            <returns>object</returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CallStaticMethod(System.String,System.String,System.Object[])">
            <summary>
            Invokes a static method
            </summary>
            <param name="typeName"></param>
            <param name="method"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CallMethodEx(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object with extended . syntax (object: this Method: Entity.CalculateOrderTotal)
            </summary>
            <param name="parent"></param>
            <param name="method"></param>
            <param name="params"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CreateInstanceFromType(System.Type,System.Object[])">
            <summary>
            Creates an instance from a type by calling the parameterless constructor.
            
            Note this will not work with COM objects - continue to use the Activator.CreateInstance
            for COM objects.
            <seealso>Class wwUtils</seealso>
            </summary>
            <param name="typeToCreate">
            The type from which to create an instance.
            </param>
            <returns>object</returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CreateInstanceFromString(System.String,System.Object[])">
            <summary>
            Creates an instance of a type based on a string. Assumes that the type's
            </summary>
            <param name="typeName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetTypeFromName(System.String)">
            <summary>
            Helper routine that looks up a type name and tries to retrieve the
            full type reference in the actively executing assemblies.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CreateComInstance(System.String)">
            <summary>
            Creates a COM instance from a ProgID. Loads either
            Exe or DLL servers.
            </summary>
            <param name="progId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.TypedValueToString(System.Object,System.Globalization.CultureInfo,System.String)">
            <summary>
            Converts a type to string if possible. This method supports an optional culture generically on any value.
            It calls the ToString() method on common types and uses a type converter on all other objects
            if available
            </summary>
            <param name="rawValue">The Value or Object to convert to a string</param>
            <param name="culture">Culture for numeric and DateTime values</param>
            <param name="unsupportedReturn">Return string for unsupported types</param>
            <returns>string</returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.StringToTypedValue(System.String,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Turns a string into a typed value generically.
            Explicitly assigns common types and falls back
            on using type converters for unhandled types.         
            
            Common uses: 
            * UI -&gt; to data conversions
            * Parsers
            <seealso>Class ReflectionUtils</seealso>
            </summary>
            <param name="sourceString">
            The string to convert from
            </param>
            <param name="targetType">
            The type to convert to
            </param>
            <param name="culture">
            Culture used for numeric and datetime values.
            </param>
            <returns>object. Throws exception if it cannot be converted.</returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.StringToTypedValue``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Generic version allow for automatic type conversion without the explicit type
            parameter
            </summary>
            <typeparam name="T">Type to be converted to</typeparam>
            <param name="sourceString">input string value to be converted</param>
            <param name="culture">Culture applied to conversion</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetEnumList(System.Type,System.Boolean)">
            <summary>
            Returns a List of KeyValuePair object
            </summary>
            <param name="enumeration"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetStaticProperty(System.String,System.String)">
            <summary>
            Retrieves a value from  a static property by specifying a type full name and property
            </summary>
            <param name="typeName">Full type name (namespace.class)</param>
            <param name="property">Property to get value from</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetStaticProperty(System.Type,System.String)">
            <summary>
            Returns a static property from a given type
            </summary>
            <param name="type">Type instance for the static property</param>
            <param name="property">Property name as a string</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetPropertyCom(System.Object,System.String)">
            <summary>
            Retrieve a dynamic 'non-typelib' property
            </summary>
            <param name="instance">Object to make the call on</param>
            <param name="property">Property to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.GetPropertyExCom(System.Object,System.String)">
            <summary>
            Returns a property or field value using a base object and sub members including . syntax.
            For example, you can access: oCustomer.oData.Company with (this,"oCustomer.oData.Company")
            </summary>
            <param name="parent">Parent object to 'start' parsing from.</param>
            <param name="property">The property to retrieve. Example: 'oBus.oData.Company'</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.SetPropertyCom(System.Object,System.String,System.Object)">
            <summary>
            Sets the property on an object.
            </summary>
            <param name="Object">Object to set property on</param>
            <param name="Property">Name of the property to set</param>
            <param name="Value">value to set it to</param>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.SetPropertyExCom(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a field or property via Reflection. This method alws 
            for using '.' syntax to specify objects multiple levels down.
            
            ReflectionUtils.SetPropertyEx(this,"Invoice.LineItemsCount",10)
            
            which would be equivalent of:
            
            Invoice.LineItemsCount = 10;
            </summary>
            <param name="Object ParentParent">
            Object to set the property on.
            </param>
            <param name="String PropertyProperty">
            Property to set. Can be an object hierarchy with . syntax.
            </param>
            <param name="Object ValueValue">
            Value to set the property to
            </param>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CallMethodCom(System.Object,System.String,System.Object[])">
            <summary>
            Wrapper method to call a 'dynamic' (non-typelib) method
            on a COM object
            </summary>
            <param name="params"></param>
            1st - Method name, 2nd - 1st parameter, 3rd - 2nd parm etc.
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ReflectionUtils.CallMethodExCom(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on a COM object with '.' syntax (Customer instance and Address.DoSomeThing method)
            </summary>
            <param name="parent">the object instance on which to call method</param>
            <param name="method">The method or . syntax path to the method (Address.Parse)</param>
            <param name="parms">Any number of parameters</param>
            <returns></returns>
        </member>
        <member name="T:Westwind.WebConnection.StringUtils">
            <summary>
            String utility class that provides a host of string related operations
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.TrimStart(System.String,System.String,System.Boolean)">
            <summary>
            Trims a sub string from a string
            </summary>
            <param name="text"></param>
            <param name="textToTrim"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.Replicate(System.String,System.Int32)">
            <summary>
            Replicates an input string n number of times
            </summary>
            <param name="input"></param>
            <param name="charCount"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.Replicate(System.Char,System.Int32)">
            <summary>
            Replicates a character n number of times and returns a string
            </summary>
            <param name="charCount"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.ProperCase(System.String)">
            <summary>
            Return a string in proper Case format
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.ToCamelCase(System.String)">
            <summary>
            Takes a phrase and turns it into CamelCase text.
            White Space, punctuation and separators are stripped
            </summary>
            <param name="phrase">Text to convert to CamelCase</param>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.FromCamelCase(System.String)">
            <summary>
            Tries to create a phrase string from CamelCase text.
            Will place spaces before capitalized letters.
            
            Note that this method may not work for round tripping 
            ToCamelCase calls, since ToCamelCase strips more characters
            than just spaces.
            </summary>
            <param name="camelCase"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.TerminateString(System.String,System.String)">
            <summary>
            Terminates a string with the given end string/character, but only if the
            value specified doesn't already exist and the string is not empty.
            </summary>
            <param name="value">String to terminate</param>
            <param name="terminator">String to terminate the value string with</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.TrimTo(System.String,System.Int32)">
            <summary>
            Trims a string to a specific number of max characters
            </summary>
            <param name="value"></param>
            <param name="charCount"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.ExtractString(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Extracts a string from between a pair of delimiters. Only the first 
            instance is found.
            </summary>
            <param name="source">Input String to work on</param>
            <param name="StartDelim">Beginning delimiter</param>
            <param name="endDelim">ending delimiter</param>
            <param name="CaseInsensitive">Determines whether the search for delimiters is case sensitive</param>
            <returns>Extracted string or ""</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.ReplaceStringInstance(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            String replace function that supports replacing a specific instance with 
            case insensitivity
            </summary>
            <param name="origString">Original input string</param>
            <param name="findString">The string that is to be replaced</param>
            <param name="replaceWith">The replacement string</param>
            <param name="instance">Instance of the FindString that is to be found. 1 based. If Instance = -1 all are replaced</param>
            <param name="caseInsensitive">Case insensitivity flag</param>
            <returns>updated string or original string if no matches</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.ReplaceString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces a substring within a string with another substring with optional case sensitivity turned off.
            </summary>
            <param name="origString">String to do replacements on</param>
            <param name="findString">The string to find</param>
            <param name="replaceString">The string to replace found string wiht</param>
            <param name="caseInsensitive">If true case insensitive search is performed</param>
            <returns>updated string or original string if no matches</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.TextAbstract(System.String,System.Int32)">
            <summary>
            Returns an abstract of the provided text by returning up to Length characters
            of a text string. If the text is truncated a ... is appended.
            </summary>
            <param name="text">Text to abstract</param>
            <param name="length">Number of characters to abstract to</param>
            <returns>string</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.Inlist(System.String,System.String[])">
            <summary>
            Determines if a string is contained in a list of other strings
            </summary>
            <param name="s"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.GetLines(System.String,System.Int32)">
            <summary>
            Parses a string into an array of lines broken
            by \r\n or \n
            </summary>
            <param name="s">String to check for lines</param>
            <param name="maxLines">Optional - max number of lines to return</param>
            <returns>array of strings, or null if the string passed was a null</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.CountLines(System.String)">
            <summary>
            Returns a line count for a string
            </summary>
            <param name="s">string to count lines for</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.ParseInt(System.String,System.Int32,System.IFormatProvider)">
            <summary>
            Parses an string into an integer. If the value can't be parsed
            a default value is returned instead
            </summary>
            <param name="input">Input numeric string to be parsed</param>
            <param name="defaultValue">Optional default value if parsing fails</param>
            <param name="formatProvider">Optional NumberFormat provider. Defaults to current culture's number format</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.ParseDecimal(System.String,System.Decimal,System.IFormatProvider)">
            <summary>
            Parses an string into an decimal. If the value can't be parsed
            a default value is returned instead
            </summary>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.StripNonNumber(System.String)">
            <summary>
            Strips all non digit values from a string and only
            returns the numeric string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.TokenizeString(System.String@,System.String,System.String,System.String)">
            <summary>
            Tokenizes a string based on a start and end string. Replaces the values with a token
            value (#@#1#@# for example).
            
            You can use Detokenize to get the original values back
            </summary>
            <param name="text"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="replaceDelimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.DetokenizeString(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Detokenizes a string tokenized with TokenizeString. Requires the collection created
            by detokenization
            </summary>
            <param name="text"></param>
            <param name="tokens"></param>
            <param name="replaceDelimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.NewStringId">
            <summary>
            Creates short string id based on a GUID hashcode.
            Not guaranteed to be unique across machines, but unlikely
            to duplicate in medium volume situations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.RandomString(System.Int32,System.Boolean)">
            <summary>
            Creates a new random string of upper, lower case letters and digits.
            Very useful for generating random data for storage in test data.
            </summary>
            <param name="size">The number of characters of the string to generate</param>
            <param name="includeNumbers"></param>
            <returns>randomized string</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.UrlEncode(System.String)">
            <summary>
            UrlEncodes a string without the requirement for System.Web
            </summary>
            <param name="String"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.UrlEncodePathSafe(System.String)">
            <summary>
            Encodes a few additional characters for use in paths
            Encodes: . #
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.UrlDecode(System.String)">
            <summary>
            UrlDecodes a string without requiring System.Web
            </summary>
            <param name="text">String to decode.</param>
            <returns>decoded string</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.GetUrlEncodedKey(System.String,System.String)">
            <summary>
            Retrieves a value by key from a UrlEncoded string.
            </summary>
            <param name="urlEncoded">UrlEncoded String</param>
            <param name="key">Key to retrieve value for</param>
            <returns>returns the value or "" if the key is not found or the value is blank</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.SetUrlEncodedKey(System.String,System.String,System.String)">
            <summary>
            Allows setting of a value in a UrlEncoded string. If the key doesn't exist
            a new one is set, if it exists it's replaced with the new value.
            </summary>
            <param name="urlEncoded">A UrlEncoded string of key value pairs</param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.BinHexToBinary(System.String)">
            <summary>
            Turns a BinHex string that contains raw byte values
            into a byte array
            </summary>
            <param name="hex">BinHex string (just two byte hex digits strung together)</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.BinaryToBinHex(System.Byte[])">
            <summary>
            Converts a byte array into a BinHex string.
            BinHex is two digit hex byte values squished together
            into a string.
            </summary>
            <param name="data">Raw data to send</param>
            <returns>BinHex string or null if input is null</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a string into bytes for storage in any byte[] types
            buffer or stream format (like MemoryStream).
            </summary>
            <param name="text"></param>
            <param name="encoding">The character encoding to use. Defaults to Unicode</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts a byte array to a stringUtils
            </summary>
            <param name="buffer">raw string byte data</param>
            <param name="encoding">Character encoding to use. Defaults to Unicode</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.Base36Encode(System.Int64)">
            <summary>
            Encodes an integer into a string by mapping to alpha and digits (36 chars)
            chars are embedded as lower case
            
            Example: 4zx12ss
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.Base36Decode(System.String)">
            <summary>
            Decodes a base36 encoded string to an integer
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.NormalizeIndentation(System.String)">
            <summary>
            Strips any common white space from all lines of text that have the same
            common white space text. Effectively removes common code indentation from
            code blocks for example so you can get a left aligned code snippet.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.LogString(System.String,System.String,System.Text.Encoding)">
            <summary>
            Simple Logging method that allows quickly writing a string to a file
            </summary>
            <param name="output"></param>
            <param name="filename"></param>
            <param name="encoding">if not specified used UTF-8</param>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.StringToStream(System.String,System.Text.Encoding)">
            <summary>
            Creates a Stream from a string. Internally creates
            a memory stream and returns that.
            </summary>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.GetProperty(System.String,System.String)">
            <summary>
            Retrieves a value from an XML-like string
            </summary>
            <param name="propertyString"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.SetProperty(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="propertyString"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.Empty(System.String)">
            <summary>
            Determines whether a string is empty (null or zero length)
            </summary>
            <param name="text">Input string</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.WebConnection.StringUtils.Empty(System.Object)">
            <summary>
            Determines wheter a string is empty (null or zero length)
            </summary>
            <param name="text">Input string (in object format)</param>
            <returns>true or false</returns>        
        </member>
        <member name="T:Westwind.WebConnection.ComArray">
            <summary>
            COM Wrapper for an array that is assigned as variable.
            This instance allows Visual FoxPro to manipulate the array
            using the wwDotNetBridge Array functions that are require
            a parent object.
            
            When passed to a method that requires an array the instance
            member is passed as the actual parameter.
            
            Note: You should always use wwDotNetBridge.CreateInstance
            to create an instance of this array from Fox code otherwise
            there's no instance set.
            </summary>
        </member>
        <member name="P:Westwind.WebConnection.ComArray.Instance">
            <summary>
            The actual array instance returned as an object.
            This instance is set and passed to and from .NET
            calls made with InvokeMethod and explicit property
            assignments with Set/GetProperty.
            </summary>
        </member>
        <member name="P:Westwind.WebConnection.ComArray.Count">
            <summary>
            Returns the length of the .NET array contained in Instance
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.#ctor(System.Object)">
            <summary>
            Creates a new COM Array from an existing array instance
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.CreateEmptyArray(System.String)">
            <summary>
            Creates a .NET array instance with 0 items on this ComArray instance
            </summary>
            <param name="arrayTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.Create(System.String)">
            <summary>
            Deprecated: Don't use
            </summary>
            <param name="arrayTypeName"></param>
            <returns></returns>        
        </member>
        <member name="M:Westwind.WebConnection.ComArray.CreateArray(System.String,System.Int32)">
            <summary>
            Creates a new array instance with size number
            of items pre-set. Elements are unassigned but
            array is dimensioned.
            
            Use SetItem() to assign values to each array element
            </summary>
            <param name="arrayTypeName">The type of the array's elements</param>
            <param name="size">Size of array to create</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.AssignFrom(System.Object,System.String)">
            <summary>
            Assigns a .NET array to this COM wrapper. Has to be passed
            as a base instance (ie. parent instance of the array) and
            the name of the array because once the array hits VFP code
            it's already been converted into a VFP array so only internal
            reflection will allow getting the actual reference into ComArray.
            </summary>
            <param name="baseInstance">Instance of the parent object of the array</param>
            <param name="arrayPropertyName">Name of the array property on the parent instance</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.AssignTo(System.Object,System.String)">
            <summary>
            Assigns this ComArray's array instance to the specified property
            </summary>
            <param name="baseInstance"></param>
            <param name="arrayPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.CreateItem">
            <summary>
            Creates an instance of the array's member type without
            actually adding it to the array. This is useful to
            more easily create members without having to specify
            the full type signature each time.
            
            Assumes that the array exists already so that the 
            item type can be inferred. The type is inferred from
            the arrays instance using GetElementType().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.CreateItemExplicit">
            <summary>
            Creates an instance of the array's member type without
            actually adding it to the array. This is useful to
            more easily create members without having to specify
            the full type signature each time.
            
            This version works of the actual elements in the array
            instance rather than using the 'official' element type.
            Looks at the first element in the array and uses its type.
            
            Assumes that the array exists already so that the 
            item type can be inferred.
            </summary>
            <param name="forceElementType">If true looks at the first element and uses that as the type to create.
            Use this option if the actual element type is of type object when the array was automatically generated
            such as when FromEnumerable() was called.
            </param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.Item(System.Int32)">
            <summary>
            Returns an item from the array.
            </summary>
            <param name="index">0 based array index to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.SetItem(System.Int32,System.Object)">
            <summary>
            Assigns a value to an array element that already exists.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.AddItem(System.Object)">
            <summary>
            Adds an item to the internal array instance.
            
            Array should exist before adding items.
            </summary>
            <param name="item">an instance of the item to add.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the array.
            </summary>
            <param name="index">0 based index of item to remove</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.Clear">
            <summary>
            Clears out the array contents
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComArray.FromEnumerable(System.Collections.IEnumerable)">
            <summary>
            Creates an instance from an enumerable
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Westwind.WebConnection.ComGuid">
            <summary>
            .NET System.Guid values cannot be passed to VFP as they are non COM 
            exported value types. So any Guid values passed to and received from .NET 
            need to be passed around as a ComGuid instance. This class wraps an 
            internal Guid instance member and allows access to the GuidString property 
            via string.
            </summary>
        </member>
        <member name="P:Westwind.WebConnection.ComGuid.Guid">
            <summary>
            The actual Guid instance that can be read by a .NET handler
            </summary>
        </member>
        <member name="P:Westwind.WebConnection.ComGuid.GuidString">
            <summary>
            String representation of the Guid. 
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ComGuid.New">
            <summary>
            Sets the Guid instance to a new Guid Value
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ComGuid.Empty">
            <summary>
            Sets the Guid to Guid.Empty
            </summary>
        </member>
        <member name="T:Westwind.WebConnection.ComValue">
            <summary>
            Class that converts to various .NET types when passed
            a FoxPro value.
            
            This object can then be used as an input to try and
            force parameters to a specific .NET type
            </summary>
        </member>
        <member name="P:Westwind.WebConnection.ComValue.Value">
            <summary>
            Internally this value is set by the various
            SetXXX methods. It's of type objcect but 
            set to the appropriate .NET subtype.
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.GetTypeName">
            <summary>
            Returns the name of the type in the Value structure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetInt16(System.Object)">
            <summary>
            Sets a Short value which is not supported
            in Visual FoxPro
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetInt64(System.Object)">
            <summary>
            Sets an Int64 value which is not supported
            in Visual FoxPro
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetUInt64(System.Object)">
            <summary>
            Sets an UInt64 value which is not supported
            in Visual FoxPro
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetUInt32(System.Object)">
            <summary>
            Sets an UInt64 value which is not supported
            in Visual FoxPro
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetSingle(System.Object)">
            <summary>
            Sets a Single Value on the 
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetFloat(System.Object)">
            <summary>
            Set a float value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetChar(System.Object)">
            <summary>
            Sets a character value from a string or integer
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetDecimal(System.Object)">
            <summary>
            Sets a Decimal value. This can actually 
            be done in FoxPro with CAST(val as Currency)
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetLong(System.Object)">
            <summary>
            Sets a Long (64 bit) integer value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetByte(System.Object)">
            <summary>
            Returns a byte value which is similar
            to Int16.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetEnum(System.String)">
            <summary>
            Assigns an enum value to the value structure. This 
            allows to pass enum values to methods and constructors
            to ensure that method signatures match properly
            </summary>
            <param name="enumValue">full type and value name. Example: System.Windows.Forms.MessageBoxOptions.OK</param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetEnumFlag(System.String,System.Int32)">
            <summary>
            Assigns an enum value that is based on a numeric (flag) value
            or a combination of flag values.
            </summary>
            <param name="enumType">Enum type name (System.Windows.Forms.MessageBoxOptions)</param>
            <param name="enumValue">numeric flag value to set enum to</param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetDbNull">
            <summary>
            Allows setting of DbNull from FoxPro since DbNull is an inaccessible
            value type for FoxPro.
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValue(System.Object)">
            <summary>
            Method that sets the Value property by fixing up any
            values based on GetProperty() rules. This means if you pass 
            an ComArray the raw array will be unpacked and stored for example.
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValueFromProperty(System.Object,System.String)">
            <summary>
            Sets the Value property from a property retrieved from .NET
            Useful to transfer value in .NET that are marshalled incorrectly
            in FoxPro such as Enum values (that are marshalled as numbers)
            </summary>
            <param name="objectRef">An object reference to the base object</param>
            <param name="property">Name of the property</param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValueFromStaticProperty(System.String,System.String)">
            <summary>
            Sets the value property from a static property retrieved from .NET.
            Useful to transfer value in .NET that are marshalled incorrectly
            in FoxPro such as Enum values (that are marshalled as numbers)
            </summary>
            <param name="typeName">Full type name as a string - can also be an Enum type</param>
            <param name="property">The static property name</param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValueFromInvokeMethod(System.Object,System.String,Westwind.WebConnection.ComArray)">
            <summary>
            Sets the Value property from a method call that passes it's positional arguments
            as an array. This version accepts a ComArray directly so it can be called
            directly from FoxPro with a ComArray instance
            </summary>
            <param name="objectRef">Object instance</param>
            <param name="method">Method to call</param>
            <param name="parms">An array of the parameters passed (use ComArray and InvokeMethod)</param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValueFromInvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Sets the Value property from a method call that passes it's positional arguments
            as an array.
            </summary>
            <param name="objectRef">Object instance</param>
            <param name="method">Method to call</param>
            <param name="parms">An array of the parameters passed (use ComArray and InvokeMethod)</param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValueFromInvokeStaticMethod(System.String,System.String,Westwind.WebConnection.ComArray)">
            <summary>
            Invokes a static method with the passed parameters and sets the Value property
            from the result value.
            </summary>
            <param name="typeName"></param>
            <param name="method"></param>
            <param name="parms"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValueFromSystemConvert(System.String,System.Object)">
            <summary>
            Invokes a method on the <see cref="T:System.Convert">System.Convert</see> static class 
            to perform conversions that are supported by that object
            </summary>
            <param name="method">The Convert method name to call as a string</param>
            <param name="value">The Value to convert</param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValueFromCreateInstance(System.String,Westwind.WebConnection.ComArray)">
            <summary>
            Sets the Value property from a CreateInstance call. Useful for
            value types that can't be passed back to FoxPro.
            </summary>
            <param name="typeName"></param>
            <param name="parms"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetValueFromCreateInstance_Internal(System.String,System.Object[])">
            <summary>
            Sets the Value property from a CreateInstance call. Useful for
            value types that can't be passed back to FoxPro.
            </summary>
            <param name="typeName"></param>
            <param name="parms"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.SetGuid(System.Object)">
            <summary>
            Sets value to a .NET Guid. Creates a GUID from 
            either ComGuid instance
            a string, or if null creates a new GUID.                
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.NewGuid">
            <summary>
            Create a new Guid on the Value structure
            </summary>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.GetGuid">
            <summary>
            Retrieves a GUID value as a string
            from the Value structure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.WebConnection.ComValue.ToString">
            <summary>
            Returns the string value of the embedded Value object
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
